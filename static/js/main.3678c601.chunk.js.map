{"version":3,"sources":["components/Encoder.tsx","utils/dtmf.ts","components/Decoder.tsx","components/App.tsx","index.tsx"],"names":["Encoder","dtmf","React","useState","duration","setDuration","Typography","gutterBottom","Slider","value","onChange","event","newValue","Array","isArray","min","max","step","valueLabelDisplay","valueLabelFormat","x","aria-labelledby","Grid","container","spacing","item","xs","Button","variant","onClick","playNote","COL","ROW","LETTERS","split","Decoder","letter","setLetter","decodeCallback","captureDTMF","getDecodedMessage","context","allFreqs","decodedMessage","letterHistory","lastLetter","this","window","AudioContext","webkitAudioContext","sym","index","findIndex","col","length","row","Math","floor","play","callback","navigator","mediaDevices","getUserMedia","audio","video","then","stream","source","createMediaStreamSource","processor","createScriptProcessor","connect","destination","onaudioprocess","e","mags","map","freq","goertzelMag","inputBuffer","sampleRate","getChannelData","frequenciesToDtmf","push","splice","every","freq1","freq2","osc1","createOscillator","osc2","type","gain1","createGain","gain2","gain","setTargetAtTime","currentTime","frequency","start","stop","samples","k","omega","PI","sine","sin","cosine","cos","coeff","q0","q1","q2","i","real","imag","sqrt","freqs","slice","mag","highestRow","reduce","prev","cur","highestCol","letterIndex","App","Container","maxWidth","style","padding","Paper","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3678c601.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Button, Typography, Slider } from '@material-ui/core';\nimport { DTMF } from '../utils/dtmf';\n\ninterface Props {\n    dtmf: DTMF;\n}\n\nconst Encoder = ({ dtmf }: Props) => {\n    const [duration, setDuration] = React.useState(0.2);\n\n    const handleDurationChange = (event: any, newValue: number | number[]) => {\n        if (!Array.isArray(newValue)) {\n            setDuration(newValue);\n            dtmf.setDuration(newValue);\n        }\n    };\n\n    return (\n        <>\n            <Typography gutterBottom>\n                Use this slider to set the duration of the tones.\n            </Typography>\n            <Slider \n                value={duration} \n                onChange={handleDurationChange}\n                min={0.1}\n                max={2.0}\n                step={0.1}\n                valueLabelDisplay={\"auto\"}\n                valueLabelFormat={x => `${x}s`}\n                aria-labelledby=\"continuous-slider\" />\n            <Typography gutterBottom>\n                Use this dialpad to create the corresponding DTMF tones.\n            </Typography>\n            <Grid container spacing={2}>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('1')}>1</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('2')}>2</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('3')}>3</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('A')}>A</Button>\n                </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('4')}>4</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('5')}>5</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('6')}>6</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('B')}>B</Button>\n                </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('7')}>7</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('8')}>8</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('9')}>9</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('C')}>C</Button>\n                </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('*')}>*</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('0')}>0</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('#')}>#</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('D')}>D</Button>\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nexport default Encoder;\n","/**\n * This class is able to encode and output DTMF singals,\n * or to capture and decode them.\n */\n\nconst COL = [1209, 1336, 1477, 1633];\nconst ROW = [697, 770, 852, 941];\nconst LETTERS = \"123A456B789C*0#D\".split('');\n\nconst NUM_SAMPLES = 512;\nconst MAGNITUDE_EPSILON = 0.05;\nconst LETTER_HISTORY = 10;\n\nexport class DTMF {\n    private context: AudioContext;\n    private duration: number;\n    private allFreqs: number[];\n    private decodedMessage: string;\n    private letterHistory: Array<string | null>;\n    private lastLetter: string | null;\n\n    /**\n     * Initialises a new DTMF Encoder/Decoder.\n     */\n    constructor() {\n        this.context = new (window.AudioContext || (window as any).webkitAudioContext)();\n        this.duration = 0.2;\n        this.allFreqs = [...ROW, ...COL];\n        this.decodedMessage = \"\";\n        this.letterHistory = [];\n        this.lastLetter = null;\n    }\n\n    /**\n     * Sets the new duration for a single note.\n     * \n     * @param duration the new duration\n     */\n    setDuration(duration: number) {\n        this.duration = duration;\n    }\n\n    /**\n     * Getter for the decoded message.\n     */\n    getDecodedMessage(): string {\n        return this.decodedMessage;\n    }\n\n    /**\n     * Plays a single note.\n     * A note can be a digit from 0 to 9, *, #, or the letters from A to D.\n     * \n     * @param sym the note to play\n     */\n    playNote(sym: string) {\n        const index = LETTERS.findIndex(x => x === sym);\n        if (index >= 0) {\n            const col = index % COL.length;\n            const row = Math.floor(index / COL.length);\n\n            this.play(COL[col], ROW[row]);\n        }\n    }\n\n    /**\n     * Starts an audio recoding and decodes the incomming DTMF signals.\n     * \n     * @param callback a callback that is fired when the input changes\n     */\n    captureDTMF(callback: (x: string | null) => void) {\n        const handleSuccess = (stream: MediaStream) => {\n            const source = this.context.createMediaStreamSource(stream);\n            const processor = this.context.createScriptProcessor(NUM_SAMPLES, 1, 1);\n\n            source.connect(processor);\n            processor.connect(this.context.destination);\n\n            processor.onaudioprocess = (e) => {\n\n                const mags = this.allFreqs.map(freq => {\n                    return this.goertzelMag(freq, e.inputBuffer.sampleRate, e.inputBuffer.getChannelData(0));\n                });\n\n                const letter = this.frequenciesToDtmf(mags);\n                const newLen = this.letterHistory.push(letter);\n                if (newLen > LETTER_HISTORY) {\n                    this.letterHistory.splice(0, 1);\n                }\n\n                if (this.letterHistory.every((x) => x === this.letterHistory[0]) &&\n                    this.letterHistory[0] !== this.lastLetter) {\n                    \n                    this.lastLetter = letter;\n                    this.decodedMessage += letter || \"\";\n                    callback(letter);\n                }\n            };\n        };\n\n        navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n            .then(handleSuccess);\n    }\n\n    /**\n     * This helper method plays a two-frequency note.\n     * \n     * @param freq1 the first frequency\n     * @param freq2 the second frequency\n     */\n    private play(freq1: number, freq2: number) {\n        let osc1 = this.context.createOscillator();\n        let osc2 = this.context.createOscillator();\n\n        osc1.type = \"sine\";\n        osc2.type = \"sine\";\n\n        let gain1 = this.context.createGain();\n        let gain2 = this.context.createGain();\n        osc1.connect(gain1);\n        gain1.connect(this.context.destination);\n        gain1.gain.value = 0.1;\n        gain1.gain.setTargetAtTime(0, this.context.currentTime + this.duration, 0.015);\n        osc2.connect(gain2);\n        gain2.connect(this.context.destination);\n        gain2.gain.value = 0.1;\n        gain2.gain.setTargetAtTime(0, this.context.currentTime + this.duration, 0.015);\n\n        osc1.frequency.value = freq1;\n        osc2.frequency.value = freq2;\n        osc1.start();\n        osc2.start();\n        osc1.stop(this.context.currentTime + this.duration + 0.1);\n        osc2.stop(this.context.currentTime + this.duration + 0.1);\n    }\n\n    /**\n     * Calculates the magnitude of a target frequency in some samples using the\n     * Goertzel Algorithm.\n     * \n     * @param freq the target frequency\n     * @param sampleRate the sample rate\n     * @param samples the actual samples\n     * @returns the calculated magnitude\n     */\n    private goertzelMag(freq: number, sampleRate: number, samples: Float32Array): number {\n        const k = Math.floor(0.5 + ((NUM_SAMPLES * freq) / sampleRate));\n        const omega = (2 * Math.PI * k) / NUM_SAMPLES;\n        const sine = Math.sin(omega);\n        const cosine = Math.cos(omega);\n        const coeff = cosine * 2;\n\n        let q0 = 0;\n        let q1 = 0;\n        let q2 = 0;\n\n        for (let i = 0; i < NUM_SAMPLES; i++) {\n            q0 = coeff * q1 - q2 + samples[i];\n            q2 = q1;\n            q1 = q0;\n        }\n\n        const real = (q1 - q2 * cosine);\n        const imag = (q2 * sine);\n\n        return Math.sqrt(real * real + imag * imag);\n    }\n\n    /**\n     * Calculates the detected letter from 8 magnitudes.\n     * \n     * @param freqs 8 magnitudes\n     */\n    private frequenciesToDtmf(freqs: number[]): string | null {\n        const row = freqs.slice(0, 4).map((x, index) => ({ index, freq: ROW[index], mag: x }));\n        const col = freqs.slice(4, 8).map((x, index) => ({ index, freq: COL[index], mag: x }));\n\n        const highestRow = row.reduce((prev, cur) => prev.mag > cur.mag ? prev : cur);\n        const highestCol = col.reduce((prev, cur) => prev.mag > cur.mag ? prev : cur);\n\n        if (highestCol.mag < MAGNITUDE_EPSILON || highestRow.mag < MAGNITUDE_EPSILON) {\n            return null;\n        }\n\n        const letterIndex = highestRow.index * 4 + highestCol.index;\n\n        return LETTERS[letterIndex];\n    }\n};\n","import React, { useState } from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport { DTMF } from '../utils/dtmf';\n\ninterface Props {\n    dtmf: DTMF;\n}\n\nconst Decoder = ({ dtmf }: Props) => {\n    const [letter, setLetter] = useState<string>(\"None\");\n\n    const decodeCallback = (letter: string | null) => {\n        setLetter(letter || \"None\");\n    }\n\n    return (\n        <>\n            <Typography gutterBottom>\n                You can capture the sound of your microphone. You should use a different device to generate the tones.\n            </Typography>\n            <Button variant=\"contained\" onClick={() => dtmf.captureDTMF(decodeCallback)}>Capture Audio</Button>\n            <br /><br />\n            <Typography gutterBottom>\n                Letter: {letter}\n            </Typography>\n            <Typography gutterBottom>\n                Message: {dtmf.getDecodedMessage()}\n            </Typography>\n        </>\n    );\n}\n\nexport default Decoder;\n","import React from 'react';\nimport { Container, Paper, Typography } from '@material-ui/core';\nimport Encoder from './Encoder';\nimport { DTMF } from '../utils/dtmf';\nimport Decoder from './Decoder';\n\nconst dtmf = new DTMF();\n\nconst App: React.FC = () => {\n  return (\n    <Container maxWidth=\"md\" style={{ padding: 20 }}>\n      <Paper style={{ padding: 10 }}>\n        <Typography variant=\"h3\">\n          DTMF Encoder/Decoder\n        </Typography>\n        <Typography gutterBottom>\n          This tool alows you to encode or decode DTMF (dual-tone multi-frequency) signals.\n        </Typography>\n        <br />\n\n        <Typography variant=\"h4\">\n          DTMF Encoder\n        </Typography>\n        <Encoder dtmf={dtmf} />\n\n        <br />\n        <Typography variant=\"h4\">\n          DTMF Decoder\n        </Typography>\n        <Decoder dtmf={dtmf} />\n        <br />\n        <Typography variant=\"caption\" gutterBottom>\n          A tool by <a href=\"https://nicolashollmann.de/\">Nicolas Hollmann</a>.\n        </Typography>\n      </Paper>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}