{"version":3,"sources":["components/Encoder.tsx","utils/dtmf.ts","components/App.tsx","index.tsx"],"names":["Encoder","dtmf","React","useState","duration","setDuration","Typography","gutterBottom","Slider","value","onChange","event","newValue","Array","isArray","min","max","step","valueLabelDisplay","valueLabelFormat","x","aria-labelledby","Grid","container","spacing","item","xs","Button","variant","onClick","playNote","COL","ROW","LETTERS","split","context","this","window","AudioContext","webkitAudioContext","sym","index","findIndex","col","length","row","Math","floor","play","freq1","freq2","osc1","createOscillator","osc2","type","gain1","createGain","gain2","connect","destination","gain","setTargetAtTime","currentTime","frequency","start","stop","App","Container","maxWidth","style","padding","Paper","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d9536bb.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Button, Typography, Slider } from '@material-ui/core';\nimport { DTMF } from '../utils/dtmf';\n\ninterface Props {\n    dtmf: DTMF;\n}\n\nconst Encoder = ({ dtmf }: Props) => {\n    const [duration, setDuration] = React.useState(0.2);\n\n    const handleDurationChange = (event: any, newValue: number | number[]) => {\n        if (!Array.isArray(newValue)) {\n            setDuration(newValue);\n            dtmf.setDuration(newValue);\n        }\n    };\n\n    return (\n        <>\n            <Typography gutterBottom>\n                Use this slider to set the duration of the tones.\n            </Typography>\n            <Slider \n                value={duration} \n                onChange={handleDurationChange}\n                min={0.1}\n                max={2.0}\n                step={0.1}\n                valueLabelDisplay={\"auto\"}\n                valueLabelFormat={x => `${x}s`}\n                aria-labelledby=\"continuous-slider\" />\n            <Typography gutterBottom>\n                Use this dialpad to create the corresponding DTMF tones.\n            </Typography>\n            <Grid container spacing={2}>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('1')}>1</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('2')}>2</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('3')}>3</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('A')}>A</Button>\n                </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('4')}>4</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('5')}>5</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('6')}>6</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('B')}>B</Button>\n                </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('7')}>7</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('8')}>8</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('9')}>9</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('C')}>C</Button>\n                </Grid>\n            </Grid>\n            <Grid container spacing={2}>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('*')}>*</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('0')}>0</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('#')}>#</Button>\n                </Grid>\n                <Grid item xs={1}>\n                    <Button variant=\"contained\" onClick={() => dtmf.playNote('D')}>D</Button>\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nexport default Encoder;\n","/**\n * This class is able to encode and output DTMF singals.\n */\n\nconst COL = [1209, 1336, 1477, 1633];\nconst ROW = [697, 770, 852, 941];\nconst LETTERS = \"123A456B789C*0#D\".split('');\n\nexport class DTMF {\n    private context: AudioContext;\n    private duration: number;\n\n    /**\n     * Initialises a new DTMF Encoder/Decoder.\n     */\n    constructor() {\n        this.context = new (window.AudioContext || (window as any).webkitAudioContext)();\n        this.duration = 0.2;\n    }\n\n    /**\n     * Sets the new duration for a single note.\n     * \n     * @param duration the new duration\n     */\n    setDuration(duration: number) {\n        this.duration = duration;\n    }\n\n    /**\n     * Plays a single note.\n     * A note can be a digit from 0 to 9, *, #, or the letters from A to D.\n     * \n     * @param sym the note to play\n     */\n    playNote(sym: string) {\n        const index = LETTERS.findIndex(x => x === sym);\n        if (index >= 0) {\n            const col = index % COL.length;\n            const row = Math.floor(index / COL.length);\n\n            this.play(COL[col], ROW[row]);\n        }\n    }\n\n    /**\n     * This helper method plays a two-frequency note.\n     * \n     * @param freq1 the first frequency\n     * @param freq2 the second frequency\n     */\n    private play(freq1: number, freq2: number) {\n        let osc1 = this.context.createOscillator();\n        let osc2 = this.context.createOscillator();\n\n        osc1.type = \"sine\";\n        osc2.type = \"sine\";\n\n        let gain1 = this.context.createGain();\n        let gain2 = this.context.createGain();\n        osc1.connect(gain1);\n        gain1.connect(this.context.destination);\n        gain1.gain.value = 0.1;\n        gain1.gain.setTargetAtTime(0, this.context.currentTime + this.duration, 0.015);\n        osc2.connect(gain2);\n        gain2.connect(this.context.destination);\n        gain2.gain.value = 0.1;\n        gain2.gain.setTargetAtTime(0, this.context.currentTime + this.duration, 0.015);\n\n        osc1.frequency.value = freq1;\n        osc2.frequency.value = freq2;\n        osc1.start();\n        osc2.start();\n        osc1.stop(this.context.currentTime + this.duration + 0.1);\n        osc2.stop(this.context.currentTime + this.duration + 0.1);\n    }\n};\n","import React from 'react';\nimport { Container, Paper, Typography } from '@material-ui/core';\nimport Encoder from './Encoder';\nimport { DTMF } from '../utils/dtmf';\n\nconst dtmf = new DTMF();\n\nconst App: React.FC = () => {\n  return (\n    <Container maxWidth=\"md\" style={{ padding: 20 }}>\n      <Paper style={{ padding: 10 }}>\n        <Typography variant=\"h3\">\n          DTMF Encoder/Decoder\n        </Typography>\n        <Typography gutterBottom>\n          This tool alows you to encode or decode DTMF (dual-tone multi-frequency) signals.\n        </Typography>\n        <br />\n\n        <Typography variant=\"h4\">\n          DTMF Encoder\n        </Typography>\n        <Encoder dtmf={dtmf} />\n\n        <br />\n        <Typography variant=\"h4\">\n          DTMF Decoder\n        </Typography>\n        <Typography>\n          Coming soon.\n        </Typography>\n        <br />\n      </Paper>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}